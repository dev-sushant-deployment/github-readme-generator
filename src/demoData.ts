import { CommitStatus, Repo } from "@prisma/client";

export const demoMarkdown = "# Gemini Code Parser\n\nGemini Code Parser is a Node.js library designed to parse the code response generated by Gemini AI in response to user prompts. It extracts information such as file names, paths, contents, and additional metadata provided by the AI, and emits structured events for easy integration into other applications.\n\n## Features\n\n- Streamlined parsing of AI-generated code responses.\n- Emits structured events for real-time processing of files and responses.\n- Easy-to-extend architecture using `EventEmitter`.\n- Integration with Google Generative AI API.\n\n## Installation\n\nEnsure you have Node.js installed on your system. Then, install the package via npm:\n\n```bash\nnpm install gemini-code-parser\n```\n\n## Usage\n\nHere’s how to integrate Gemini Code Parser in your project:\n\n### Step 1: Import and Initialize\n\n```javascript\nimport { GeminiCodeParser } from 'gemini-code-parser';\n\nconst parser = new GeminiCodeParser('<Your_Google_AI_API_Key>');\n```\n\n### Step 2: Generate Parsed Code Stream\n\n```javascript\nconst prompt = \"Write a Node.js application to manage tasks.\";\nparser.generateParsedCodeStream(prompt)\n  .then(parsedCode => {\n    console.log(parsedCode);\n  })\n  .catch(error => {\n    console.error(\"Error generating parsed code:\", error);\n  });\n```\n\n## API Reference\n\n### `GeminiCodeParser`\n\n#### Constructor\n\n```javascript\nnew GeminiCodeParser(apiKey: string)\n```\n- `apiKey`: Google AI API key for accessing the Generative AI service.\n\n#### Methods\n\n- ##### `generateCodeStream(prompt: string)`\n    - Streams the AI-generated content in response to the given prompt.\n    - Returns: `AsyncIterable` of content chunks.\n\n- ##### `generateParsedCodeStream(prompt: string)`\n    - Parses the AI-generated response and returns structured code files and metadata.\n    - Returns: `Promise` resolving to the parsed code object.\n\n## Event Listeners\nGemini Code Parser emits various events to facilitate real-time processing:\n\n- `file-start`: Emitted when a file parsing starts.\n    - Payload: `{ name, path }`\n\n- `file`: Emitted while parsing file content.\n    - Payload: `{ name, path, content }`\n\n- `file-end`: Emitted when a file parsing ends.\n    - Payload: `{}`\n\n- `response`: Emitted for the general AI response.\n    - Payload: `{ response }`\n\n- `response-end`: Emitted when the AI response ends.\n    - Payload: `{}`\n\n- `title`: Emitted for the title of the generated application.\n    - Payload: `{ title }`\n\n## Example \n\nHere’s a full example that listens to emitted events:\n\n```javascript\nimport { GeminiCodeParser } from 'gemini-code-parser';\n\nconst parser = new GeminiCodeParser('<Your_Google_AI_API_Key>');\n\nparser.on('file-start', data => {\n  console.log(\"File start:\", data);\n});\n\nparser.on('file', data => {\n  console.log(\"File content:\", data);\n});\n\nparser.on('file-end', () => {\n  console.log(\"File end.\");\n});\n\nparser.on('response', data => {\n  console.log(\"General response:\", data);\n});\n\nparser.generateParsedCodeStream(\"Create a simple web server using Node.js.\")\n  .then(parsedCode => {\n    console.log(\"Parsed code:\", parsedCode);\n  })\n  .catch(error => {\n    console.error(\"Error:\", error);\n  });\n```\n";

export const demoRepoData : Repo[] = [
  {
    id: "1",
    name: "gemini-code-parser",
    ownerId: "1",
    createdAt: new Date("2022-01-01T00:00:00Z"),
    updatedAt: new Date("2022-01-01T00:00:00Z")
  },
  {
    id: "2",
    name: "gemini-ai",
    ownerId: "1",
    createdAt: new Date("2022-01-01T00:00:00Z"),
    updatedAt: new Date("2022-01-01T00:00:00Z")
  },
  {
    id: "3",
    name: "gemini-ai-frontend",
    ownerId: "1",
    createdAt: new Date("2022-01-01T00:00:00Z"),
    updatedAt: new Date("2022-01-01T00:00:00Z")
  },
  {
    id: "4",
    name: "gemini-ai-backend",
    ownerId: "1",
    createdAt: new Date("2022-01-01T00:00:00Z"),
    updatedAt: new Date("2022-01-01T00:00:00Z")
  },
  {
    id: "5",
    name: "gemini-ai-api",
    ownerId: "1",
    createdAt: new Date("2022-01-01T00:00:00Z"),
    updatedAt: new Date("2022-01-01T00:00:00Z")
  }
]

export const demoRepoStats = {
  stargazers_count: 5,
  forks_count: 2,
  collaborators_count: 3,
  updatedAt: new Date("2022-01-01T00:00:00Z"),
  commits_count: 30,
  error: undefined
}

export const demoCommits : {
  id: string;
  message: string;
  createdAt: Date;
  status: CommitStatus; // CHECKING | GENERATING | UPDATED | NO_CHANGES
  markdown: string | null; // null if status is CHECKING | NO_CHANGES
  // In demodata include all types of commit status, with 30 commits in total
}[] = [
  {
    id: "1",
    message: "Initial commit",
    createdAt: new Date("2022-01-01T00:00:00Z"),
    status: "CHECKING",
    markdown: "Initial commit with basic setup"
  },
  {
    id: "2",
    message: "Added README",
    createdAt: new Date("2022-01-02T00:00:00Z"),
    status: "GENERATING",
    markdown: "Added README file with project description"
  },
  {
    id: "3",
    message: "Setup CI/CD",
    createdAt: new Date("2022-01-03T00:00:00Z"),
    status: "NO_CHANGES",
    markdown: "Configured CI/CD pipeline"
  },
  {
    id: "4",
    message: "Refactored codebase",
    createdAt: new Date("2022-01-04T00:00:00Z"),
    status: "UPDATED",
    markdown: "Refactored code for better readability"
  },
  {
    id: "5",
    message: "Fixed bugs",
    createdAt: new Date("2022-01-05T00:00:00Z"),
    status: "UPDATED",
    markdown: "Fixed several bugs reported by users"
  },
  {
    id: "6",
    message: "Added new feature",
    createdAt: new Date("2022-01-06T00:00:00Z"),
    status: "NO_CHANGES",
    markdown: "Implemented new feature for user management"
  },
  {
    id: "7",
    message: "Updated dependencies",
    createdAt: new Date("2022-01-07T00:00:00Z"),
    status: "UPDATED",
    markdown: "Updated project dependencies to latest versions"
  },
  {
    id: "8",
    message: "Improved performance",
    createdAt: new Date("2022-01-08T00:00:00Z"),
    status: "NO_CHANGES",
    markdown: "Optimized code for better performance"
  },
  {
    id: "9",
    message: "Code cleanup",
    createdAt: new Date("2022-01-09T00:00:00Z"),
    status: "UPDATED",
    markdown: "Removed unused code and files"
  },
  {
    id: "10",
    message: "Added tests",
    createdAt: new Date("2022-01-10T00:00:00Z"),
    status: "FAILED",
    markdown: "Added unit tests for core modules"
  },
  {
    id: "11",
    message: "Checking for updates",
    createdAt: new Date("2022-01-11T00:00:00Z"),
    status: "UPDATED",
    markdown: null
  },
  {
    id: "12",
    message: "Generating new content",
    createdAt: new Date("2022-01-12T00:00:00Z"),
    status: "UPDATED",
    markdown: null
  },
  {
    id: "13",
    message: "No changes detected",
    createdAt: new Date("2022-01-13T00:00:00Z"),
    status: "NO_CHANGES",
    markdown: null
  },
  {
    id: "14",
    message: "Updated documentation",
    createdAt: new Date("2022-01-14T00:00:00Z"),
    status: "UPDATED",
    markdown: "Updated project documentation"
  },
  {
    id: "15",
    message: "Added logging",
    createdAt: new Date("2022-01-15T00:00:00Z"),
    status: "UPDATED",
    markdown: "Implemented logging for debugging"
  },
  {
    id: "16",
    message: "Enhanced security",
    createdAt: new Date("2022-01-16T00:00:00Z"),
    status: "UPDATED",
    markdown: "Enhanced security measures"
  },
  {
    id: "17",
    message: "Improved UI",
    createdAt: new Date("2022-01-17T00:00:00Z"),
    status: "NO_CHANGES",
    markdown: "Improved user interface for better UX"
  },
  {
    id: "18",
    message: "Refactored tests",
    createdAt: new Date("2022-01-18T00:00:00Z"),
    status: "UPDATED",
    markdown: "Refactored tests for better coverage"
  },
  {
    id: "19",
    message: "Fixed deployment issues",
    createdAt: new Date("2022-01-19T00:00:00Z"),
    status: "NO_CHANGES",
    markdown: "Fixed issues with deployment scripts"
  },
  {
    id: "20",
    message: "Added API endpoints",
    createdAt: new Date("2022-01-20T00:00:00Z"),
    status: "UPDATED",
    markdown: "Added new API endpoints for data retrieval"
  },
  {
    id: "21",
    message: "Updated UI components",
    createdAt: new Date("2022-01-21T00:00:00Z"),
    status: "UPDATED",
    markdown: "Updated UI components for consistency"
  },
  {
    id: "22",
    message: "Improved error handling",
    createdAt: new Date("2022-01-22T00:00:00Z"),
    status: "NO_CHANGES",
    markdown: "Improved error handling mechanisms"
  },
  {
    id: "23",
    message: "Optimized database queries",
    createdAt: new Date("2022-01-23T00:00:00Z"),
    status: "UPDATED",
    markdown: "Optimized database queries for performance"
  },
  {
    id: "24",
    message: "Added caching",
    createdAt: new Date("2022-01-24T00:00:00Z"),
    status: "UPDATED",
    markdown: "Implemented caching for faster data retrieval"
  },
  {
    id: "25",
    message: "Updated build scripts",
    createdAt: new Date("2022-01-25T00:00:00Z"),
    status: "UPDATED",
    markdown: "Updated build scripts for automation"
  },
  {
    id: "26",
    message: "Fixed UI bugs",
    createdAt: new Date("2022-01-26T00:00:00Z"),
    status: "UPDATED",
    markdown: "Fixed several UI bugs reported by users"
  },
  {
    id: "27",
    message: "Improved accessibility",
    createdAt: new Date("2022-01-27T00:00:00Z"),
    status: "UPDATED",
    markdown: "Improved accessibility features"
  },
  {
    id: "28",
    message: "Added new tests",
    createdAt: new Date("2022-01-28T00:00:00Z"),
    status: "UPDATED",
    markdown: "Added new tests for recent features"
  },
  {
    id: "29",
    message: "Updated configurations",
    createdAt: new Date("2022-01-29T00:00:00Z"),
    status: "UPDATED",
    markdown: "Updated project configurations"
  },
  {
    id: "30",
    message: "Fixed security vulnerabilities",
    createdAt: new Date("2022-01-30T00:00:00Z"),
    status: "UPDATED",
    markdown: "Fixed identified security vulnerabilities"
  }
]